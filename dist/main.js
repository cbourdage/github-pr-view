(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var STORAGE_PREFIX = exports.STORAGE_PREFIX = 'github-pr-view';
var STORAGE_PRS_KEY = exports.STORAGE_PRS_KEY = STORAGE_PREFIX + '-prs';
var STORAGE_TOKEN = exports.STORAGE_TOKEN = STORAGE_PREFIX + '-token';

var CACHE_TTL = exports.CACHE_TTL = 15 * 60 * 1000;

},{}],2:[function(require,module,exports){
'use strict';

var _constants = require('./constants');

var _util = require('./util');

var token = localStorage.getItem(_constants.STORAGE_TOKEN);
var repo = window.location.href.split('github.com/')[1].replace(/\/pulls/, '');

var prs = JSON.parse(localStorage.getItem(_constants.STORAGE_PRS_KEY) || '{}');
!prs.items && (prs.items = []);
console.log(repo, _constants.STORAGE_PRS_KEY, prs);

var prsContainerEl = document.querySelector('.js-active-navigation-container');
var prAnchorEls = prsContainerEl.querySelectorAll('a.h4');

prAnchorEls.forEach(function (item, key) {
  var parts = item.href.split('/pull/');
  if (!(0, _util.findPR)(prs.items, parts[1])) {

    console.log('------------------------------------------------');
    console.log(parts[1], (0, _util.findPR)(prs.items, parts[1]));
    console.log(new Date().getTime());
    console.log(item.expiry);
    console.log('not found');

    prs.items.push({
      pr: parts[1],
      expiry: new Date().getTime() + _constants.CACHE_TTL,
      status: ''
    });
  } else if (new Date().getTime() > item.expiry) {

    console.log('------------------------------------------------');
    console.log(parts[1], (0, _util.findPR)(prs.items, parts[1]));
    console.log(new Date().getTime());
    console.log(item.expiry);
    console.log('found but expired?');

    prs.items.splice(key, 1, Object.assign(item, {
      expiry: new Date().getTime() + _constants.CACHE_TTL,
      status: ''
    }));
  }
});

console.log(repo, _constants.STORAGE_PRS_KEY, prs);

Promise.all((0, _util.makePRRequests)(repo, prs, token)).then(function () {
  prs.updatedAt = new Date().getTime();
  console.log(prs);
  localStorage.setItem(_constants.STORAGE_PRS_KEY, JSON.stringify(prs));
  return prs.items;
}).then(function (items) {
  return (0, _util.renderLabels)(prsContainerEl, items);
}).catch(function (e) {
  console.warn(e);
  if (!token) {
    var t = prompt('Private repos require a personal access token. You can set this up under: Settings > Personal access tokens > Generate New');

    if (t) {
      localStorage.setItem(_constants.STORAGE_TOKEN, t);

      Promise.all((0, _util.makePRRequests)(repo, prs, t)).then(function (items) {
        return (0, _util.renderLabels)(prsContainerEl, items);
      });
    }
  } else {
    alert('There was an issue accessing the repo.');
  }
});

},{"./constants":1,"./util":3}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makePRRequests = makePRRequests;
exports.findPR = findPR;
exports.renderLabels = renderLabels;

var _constants = require('./constants');

function makeRequest(url) {
  var opts = arguments.length <= 1 || arguments[1] === undefined ? { token: null } : arguments[1];

  var fopts = { headers: {} };

  if (opts.token) {
    fopts.headers = Object.assign(fopts.headers, {
      Authorization: 'token ' + opts.token,
      Accept: 'application/vnd.github.inertia-preview+json'
    });
  }

  return fetch(url, fopts).then(validateResponse).then(function (res) {
    return res.text();
  }).catch(handleError);
}

function validateResponse(r) {
  if (r.status >= 200 && r.status < 300) {
    return r;
  }
  throw new Error(r.statusText);
}

function handleError(e) {
  console.warn(e);
  throw e;
}

function makePRRequests(repo, prs, token) {
  var requests = [];
  prs.items.forEach(function (item, key) {
    if (!item.status && key < 2) {
      console.log('requesting for: ', item);

      requests.push(makeRequest('https://github.com/' + repo + '/pull/' + item.pr, { token: token }).then(function (res) {
        console.log(res);

        if (/<h4 class="status-heading  ">(.*)Changes approved(.*)<\/h4>/.test(res)) {
          console.log('approved');
        } else if (/<h4 class="status-heading text-red ">(.*)Changes requested(.*)<\/h4>/.test(res)) {
          console.log('requested');
        }

        item = Object.assign(item, {
          expiry: new Date().getTime() + _constants.CACHE_TTL
        });
      }));
    }
  });

  return requests;
}

function findPR(list, pr) {
  return list.find(function (item) {
    return pr === item.pr;
  });
}

function renderLabels(prsContainerEl, items) {
  prsContainerEl.querySelectorAll('a.h4').forEach(function (item) {
    var parts = item.href.split('/pull/');
    var pr = findPR(items, parts[1]);

    if (pr.status) {
      var label = document.createElement('a');
      var sharedCn = 'label v-align-text-top';

      switch (pr.status) {
        case 'approved':
          label.className = sharedCn + ' labelstyle-bd2c00 linked-labelstyle-bd2c00';
          label.style = 'background-color: #bd2c00; color: #fff;';
          label.innerText = 'Changes Approved';
        case 'changes_requested':
          label.className = sharedCn + ' labelstyle-6cc644 linked-labelstyle-6cc644';
          label.style = 'background-color: #6cc644; color: #fff;';
          label.innerText = 'Changes Requested';
        default:
          break;
      }

      item.nextElementSibling.appendChild(label);
    }
  });
}

},{"./constants":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
